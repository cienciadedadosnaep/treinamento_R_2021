[["index.html", "Anotações do treinamento R 1 Pré-Requisitos", " Anotações do treinamento R Robson Wilson Silva Pessoa 2021-08-03 1 Pré-Requisitos Para o treinamento em R para as atividades do projeto Ciência de Dados na Escola Pública é necessário conhecimento básico em R e linguagem de programação estruturada. "],["intro.html", "2 Instalações e configurações", " 2 Instalações e configurações Inicialmente é necessário fazer as instalações dos softwares R e Rstudio. Em seguida, deve ser instalados alguns pacotes comumente utilizados ao longo do curso como: tidyverse, que inclui readr dplyr tibble ggplot2 tidyr stringr purr forcats install.packages(tidyverse) "],["manipulação-de-dados.html", "3 Manipulação de dados 3.1 Importanto conjunto de dados 3.2 Objetos e vetores 3.3 Data frames 3.4 Operadores de seleção 3.5 Utilizando e criando funções no R 3.6 Operadores lógicos e aritméticos 3.7 Loopings de programação: for e while 3.8 O operador pipe (%&gt;%) 3.9 Importando arquivos de texto: .csv e .txt 3.10 Importando arquivos excel: .xls e .xlsx 3.11 Manipulação de bases de dados (o pacote dplyr)\"", " 3 Manipulação de dados 3.1 Importanto conjunto de dados Uma das opções mais simples de leitura de dados num arquivo é a função read.csv() do pacote {utils}. Para o nosso conjunto de dados de Segurança Pública que está dentro da pasta do nosso Rproject, temos o seguinte comando: read.csv(file=&#39;data/all_data_v00.csv&#39;, header = TRUE,sep =&#39;,&#39;) 3.2 Objetos e vetores knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Tabela 3.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa ` ## Classes: números, caracteres, lógicos e data frames 3.3 Data frames 3.4 Operadores de seleção 3.5 Utilizando e criando funções no R 3.6 Operadores lógicos e aritméticos 3.7 Loopings de programação: for e while 3.8 O operador pipe (%&gt;%) 3.9 Importando arquivos de texto: .csv e .txt 3.10 Importando arquivos excel: .xls e .xlsx 3.11 Manipulação de bases de dados (o pacote dplyr)\" "],["atividades.html", "4 Atividades 4.1 Carregamento de bibliotecas e dados 4.2 Exemplo de aplicação do Lubridate 4.3 Uso do Data Table (DT) 4.4 Resolução de situações problemas", " 4 Atividades 4.1 Carregamento de bibliotecas e dados library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union library(tidyr) library(readr) library(ggplot2) library(magrittr) ## ## Attaching package: &#39;magrittr&#39; ## The following object is masked from &#39;package:tidyr&#39;: ## ## extract library(lubridate) ## ## Attaching package: &#39;lubridate&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## date, intersect, setdiff, union library(readr) library(DT) dados &lt;- read_csv(&quot;data/all_data_v00.csv&quot;, col_types = cols(X1 = col_integer(), id = col_integer(), date = col_date(format =&quot;%Y-%m-%d&quot;)), locale = locale(encoding = &quot;ISO-8859-1&quot;)) 4.2 Exemplo de aplicação do Lubridate dados %&gt;% filter(ano==2014) %&gt;% filter(aisp==&quot;AISP 12 - Itapuã&quot;) %&gt;% select(mes,homicidios) %&gt;% arrange(homicidios) %&gt;% mutate(MES = month(ymd(140101) + months(mes - 1), label = TRUE)) ## # A tibble: 12 x 3 ## mes homicidios MES ## &lt;dbl&gt; &lt;dbl&gt; &lt;ord&gt; ## 1 7 7 jul ## 2 5 8 mai ## 3 3 10 mar ## 4 9 10 set ## 5 6 12 jun ## 6 10 12 out ## 7 12 12 dez ## 8 1 14 jan ## 9 11 14 nov ## 10 2 16 fev ## 11 8 18 ago ## 12 4 19 abr 4.3 Uso do Data Table (DT) dados %&gt;% filter(ano==2014) %&gt;% filter(aisp==&quot;AISP 12 - Itapuã&quot;) %&gt;% select(mes,homicidios) %&gt;% arrange(homicidios) %&gt;% mutate(MES = month(ymd(140101) + months(mes - 1), label = TRUE)) %&gt;% select(MES,homicidios) %&gt;% arrange(MES) %&gt;% datatable() 4.4 Resolução de situações problemas Nesta seção desejamos apresentar o resultado de análise das ocorrências de crimes na região central da cidade constituída pela Região Integrada de Segurança Pública (RISP CTL). Aqui trabalharemos com o banco de dados construído a partir de boletins mensais disponibilizados pela Secretaria de Segurança Pública. Primeiro faremos os filtros necessarios: AISP 11 - Tancredo Neves,AISP 10 - Pau da Lima e AISP 13 - Cajazeiras; Definicao de um ano especifico, para os últimos 12 meses válidos é 2019; Seleção de variáveis Homicídios e Lesão Seguida de Morte 4.4.1 Código filtros e seleções dados %&gt;% filter(aisp %in% c(&#39;AISP 11 - Tancredo Neves&#39;, &#39;AISP 10 - Pau da Lima&#39;, &#39;AISP 13 - Cajazeiras&#39;)) %&gt;% filter(ano==2019) %&gt;% select(mes,homicidios,lesao_morte) ## # A tibble: 36 x 3 ## mes homicidios lesao_morte ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 7 0 ## 2 1 10 0 ## 3 1 4 0 ## 4 2 5 0 ## 5 2 6 0 ## 6 2 1 0 ## 7 3 6 0 ## 8 3 17 0 ## 9 3 10 1 ## 10 4 3 0 ## # … with 26 more rows 4.4.2 Código - manipulação de datas Embora haja a variável mês no nosso conjunto de dados, ela está no formato numérico, que para a produção de visualizações de dados discretizados no domínio do tempo é mais conveniente sua apresentação com a formatação de datas e ou horários. Portanto, utilizaremos outro pacote do conjunto tidyverse, o lubridate. A seguir, demonstraremos a conversão dos dados numéricos no seus correspondentes símbolos de data. dados %&gt;% filter(aisp %in% c(&#39;AISP 11 - Tancredo Neves&#39;, &#39;AISP 10 - Pau da Lima&#39;, &#39;AISP 13 - Cajazeiras&#39;)) %&gt;% filter(ano==2019) %&gt;% select(mes,homicidios,lesao_morte) %&gt;% mutate(MES = month(ymd(190115) + months(mes - 1), label = TRUE)) ## # A tibble: 36 x 4 ## mes homicidios lesao_morte MES ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;ord&gt; ## 1 1 7 0 jan ## 2 1 10 0 jan ## 3 1 4 0 jan ## 4 2 5 0 fev ## 5 2 6 0 fev ## 6 2 1 0 fev ## 7 3 6 0 mar ## 8 3 17 0 mar ## 9 3 10 1 mar ## 10 4 3 0 abr ## # … with 26 more rows A última linha do código contém um mutate(). No qual, é adotada uma data de referência, neste caso, ymd(190115) correponde a data 15/jan/2019 definido pela função ymd() em seguida é somado o valor correspondente a cada mês com mes-1, pois assim somaremos 0 meses a data de 15/jan/2019 e assim obteremos a representação adequada de todos os meses e o extrairemos por meio de outro comando do pacote lubridate, chamado month(...,label=TRUE) no qual a option ``label=TRUE``` nos fornecerá a variável jan,fev,…,dez. 4.4.3 Código Gráficos Para a construção dos gráficos é necessário estudar cheatsheet da biblioteca do ggplot2. Para realizar esta produção gráfica de maneira adequada é conveniente que os dados sejam corretamente prepados. Tinhamos o objetivo inicial de construir os gráficos de maneira que as variáveis dos crimes ficassem empilhadas, portanto, devemos averiguar se a estrutura do nosso banco está da forma mais apropriada para o uso da biblioteca do ggplot2 na sua forma mais simples de uso, ou se devemos utilizar recursos da própria biblioteca gráfica para alcançar nossos resultados. Para aproveitar melhor a folha de dicas do ggplot2 é necessário conhecer os tipos de variáveis que estamos trabalhando. Sabemos que a nossa variável que ocupará a abscissa são as representações as abreviaturas dos meses, portanto, variáveis categoricas ou discretas, especialmente poir serem variáveis produzidas pelo pacote lubridate herdaram propriedades de ordenação temporal &lt;ord&gt;. Enquanto que as variáveis dos crimes foram imprtadas do banco como double (&lt;dbl&gt;). Assim, em resumo temos uma variavél discrete e outra continuos. Portanto, ao consultarmos a seção discrete x, continous y do folha de dicas do ggplot2 chegamos a conclusão que devemos usar a geom_col() para a geometria do nosso gráfico. Primeiro faremos os gráficos de ocorrências de homicídios: dados %&gt;% filter(aisp %in% c(&#39;AISP 11 - Tancredo Neves&#39;, &#39;AISP 10 - Pau da Lima&#39;, &#39;AISP 13 - Cajazeiras&#39;)) %&gt;% filter(ano==2019) %&gt;% select(mes,homicidios,lesao_morte) %&gt;% mutate(MES = month(ymd(190115) + months(mes - 1), label = TRUE)) %&gt;% ggplot(aes(x = MES,y = homicidios,colour=&#39;red&#39;)) + geom_col() destacamos o contorno das observações em vermelho para mostar que este tipo de gráfico é construído de tal maneira que não efetua uma soma ao longo das linhas e sim empilha as observações sendo que são proporcionais aos seus respectivos valores. Para cada mês, para o filtro que realizamos acima, possui 3 valores que correpondem às AISP 11 - Tancredo Neves,AISP 10 - Pau da Lima e AISP 13 - Cajazeiras. Para aperfeiçoar a apresentação deste gráfico podemos colori-lo em função das AISPs, mas antes temos incluir a variável aisp no select() como realizado abaixo: dados %&gt;% filter(aisp %in% c(&#39;AISP 11 - Tancredo Neves&#39;, &#39;AISP 10 - Pau da Lima&#39;, &#39;AISP 13 - Cajazeiras&#39;)) %&gt;% filter(ano==2019) %&gt;% select(mes,aisp,homicidios,lesao_morte) %&gt;% mutate(MES = month(ymd(190115) + months(mes - 1), label = TRUE)) %&gt;% ggplot(aes(x = MES,y = homicidios,fill=aisp)) + geom_col() Vamos explorar um pouco mais as funcionalidades desta biblioteca. A opção default produz a versão empilhadas de observações pertencentes às categorias das abscissas, neste caso são os meses. A seguir, apresentamos outro gráfico, apenas colocando as observações de cada aisp lado a lado, facilitando a comparação dos gráficos apenas trabalhando com uma option na geometria geom_col(position = 'dodge'): dados %&gt;% filter(aisp %in% c(&#39;AISP 11 - Tancredo Neves&#39;, &#39;AISP 10 - Pau da Lima&#39;, &#39;AISP 13 - Cajazeiras&#39;)) %&gt;% filter(ano==2019) %&gt;% select(mes,aisp,homicidios,lesao_morte) %&gt;% mutate(MES = month(ymd(190115) + months(mes - 1), label = TRUE)) %&gt;% ggplot(aes(x = MES,y = homicidios,fill=aisp)) + geom_col(position = &#39;dodge&#39;) Desta vez o objetivo é a comparação de dois crimes, ocorrências de homicídios e lesão seguida de morte, para alcaçar tal objetivo é necessário que os crimes sejam organizados de forma similar à variável aisp, para isto utilizaremos o comando gather() que pertence ao pacote tidyr, demonstraremos esta transformação: dados %&gt;% filter(aisp %in% c(&#39;AISP 11 - Tancredo Neves&#39;, &#39;AISP 10 - Pau da Lima&#39;, &#39;AISP 13 - Cajazeiras&#39;)) %&gt;% filter(ano==2019) %&gt;% select(mes,aisp,homicidios,lesao_morte) %&gt;% mutate(MES = month(ymd(190115) + months(mes - 1), label = TRUE)) %&gt;% gather(key = crimes,value = valores,-mes,-aisp,-MES) %&gt;% arrange(MES) ## # A tibble: 72 x 5 ## mes aisp MES crimes valores ## &lt;dbl&gt; &lt;chr&gt; &lt;ord&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 AISP 10 - Pau da Lima jan homicidios 7 ## 2 1 AISP 11 - Tancredo Neves jan homicidios 10 ## 3 1 AISP 13 - Cajazeiras jan homicidios 4 ## 4 1 AISP 10 - Pau da Lima jan lesao_morte 0 ## 5 1 AISP 11 - Tancredo Neves jan lesao_morte 0 ## 6 1 AISP 13 - Cajazeiras jan lesao_morte 0 ## 7 2 AISP 10 - Pau da Lima fev homicidios 5 ## 8 2 AISP 11 - Tancredo Neves fev homicidios 6 ## 9 2 AISP 13 - Cajazeiras fev homicidios 1 ## 10 2 AISP 10 - Pau da Lima fev lesao_morte 0 ## # … with 62 more rows entre os argumentos da função ``gather()``` estão key que recebe as tags das variáveis ( neste caso são homicidios e lesao_morte) e value que recebe os respectivos valores das variáveis. Assim os dados são empilhados. As variáveis que são acompanhados de sinal menos \\(-\\) não são empilhadas. Agora é possível produzir uma visualização gráfica como realizado em etapas anteriores: dados %&gt;% filter(aisp %in% c(&#39;AISP 11 - Tancredo Neves&#39;, &#39;AISP 10 - Pau da Lima&#39;, &#39;AISP 13 - Cajazeiras&#39;)) %&gt;% filter(ano==2019) %&gt;% select(mes,aisp,homicidios,lesao_morte) %&gt;% mutate(MES = month(ymd(190115) + months(mes - 1), label = TRUE)) %&gt;% gather(key = crimes,value = valores,-mes,-aisp,-MES) %&gt;% ggplot(aes(x = MES,y = valores,fill=crimes)) + geom_col(position = &#39;dodge&#39;) Como os casos lesão seguida de morte são zero para quase todos os meses não é possível observar as barras azuis em alguns meses. Por uma questão de identidade visual podemos estar interessados em manipular um gráfico para alcançar uma respentação visual mais refinada. Aqui tentaremos nos aproximar da identidade visual do site do grupo Gamma por meio das funções theme() e scale_fill_manual(): ## FILTROS dados %&gt;% filter(aisp %in% c(&#39;AISP 11 - Tancredo Neves&#39;, &#39;AISP 10 - Pau da Lima&#39;, &#39;AISP 13 - Cajazeiras&#39;)) %&gt;% filter(ano==2019) %&gt;% ## SELECAO select(mes,aisp,homicidios,lesao_morte) %&gt;% ## TRANSFORMACAO mutate(MES = month(ymd(190115) + months(mes - 1), label = TRUE)) %&gt;% gather(key = crimes,value = valores,-mes,-aisp,-MES) %&gt;% ## MAPEAMENTO ggplot(aes(x = MES,y = valores,fill=crimes)) + ## DEFINICAO GEOMETRIA geom_col(position = &#39;dodge&#39;)+ ## INCLUSAO DE LABELS labs(title = &quot;Ocorrências mensais RISP CTL&quot;, x = &quot;mês&quot;, y = &quot;Nº de ocorrências&quot; )+ ## ALTERACAO FONTS LABS theme(title = element_text(size = 12,colour = &quot;white&quot;))+ theme(axis.title.x=element_text(size=11)) + theme(axis.title.y=element_text(size=11)) + theme(axis.text=element_text(face=&quot;bold&quot;, color=&quot;white&quot;,size =12)) + ## ALTERACAO FONTS LEGENDA theme(legend.text=element_text(size =11)) + theme(legend.background = element_rect(fill=NA, size=0.5, linetype=&quot;solid&quot;, colour =NA))+ scale_fill_discrete(name = &#39;Crimes&#39;, labels = c(&quot;Homicídios&quot;, &quot;Lesão/Morte&quot;))+ theme(legend.text = element_text(colour=&quot;white&quot;, size=10, face=&quot;bold&quot;))+ ## ALTERACAO BACKGROUD DA AREA DE PLOTAGEM - PARTE EXTERNA theme(plot.background = element_rect(fill = &quot;#363636&quot;))+ ## ALTERACAO BACKGROUD DA AREA DE PLOTAGEM - PARTE INTERNA theme(panel.grid = element_blank(), axis.ticks.y = element_line())+ theme(panel.border = element_rect(fill=NA, color = &quot;#009FE3&quot;, size = 2))+ theme(panel.background = element_rect(fill=&quot;#7D7D7D&quot;,color = &quot;#7D7D7D&quot;, size = 2), panel.grid.major = element_line(color = &quot;#009FE3&quot;, size = .5), panel.grid.minor = element_line(color = &quot;#009FE3&quot;, size = .25))+ ## DEFINICAO CORES MANUAL scale_fill_manual(values=c(&quot;#999999&quot;, &quot;gray&quot;),labels = c(&quot;Homicídios&quot;, &quot;Lesão/Morte&quot;)) ## Scale for &#39;fill&#39; is already present. Adding another scale for &#39;fill&#39;, which ## will replace the existing scale. "],["controle-de-versões-de-projetos.html", "5 Controle de versões de projetos", " 5 Controle de versões de projetos Seguir orientações da apresentação da Beatriz Milz Instalação do Git no computador; Criar Conta no Github; Configurar Git no Rstudio; Criar projeto no Github; Testar push e pull. "],["dashboards.html", "6 Dashboards", " 6 Dashboards Exemplo de dashboard desenvolvido ao longo do nosso curso: Flexdashboard - Indicadores de Segurança Pública Shiny - Indicadores de Segurança Pública "],["saúde-probabilidade-mapas.html", "7 Saúde - Probabilidade - Mapas 7.1 Recursos físicos e humanos da rede assistencial de saúde 7.2 Objetivo de Desenvolvimento Sustentável 7.3 IBGE PENSE 7.4 SISVAN 7.5 Informações sobre saúde SEI 7.6 Informações sobre câncer 7.7 Divisão dos distritos sanitários 7.8 Doenças de Condições Crônicas e Infecções Sexualmente Transmissíveis 7.9 Tabnet Salvador 7.10 Histogramas 7.11 Probabilidade versus possibilidade", " 7 Saúde - Probabilidade - Mapas Um pai cientista tem passado por um dilema profundo. Diante da pandemia que recentemente foi enfrentada por todos os continentes, chegará o momento de maior dificuldade em sua decisão em reenviar seu filho para a escola. O filho já o questionava sobre a possibilidade de frequentar as aulas. Mas quais informações temos acesso que podem nos ajudar nesta avaliação? 7.1 Recursos físicos e humanos da rede assistencial de saúde Mapas 7.2 Objetivo de Desenvolvimento Sustentável ODS3 ODS3-IBGE 7.3 IBGE PENSE Tabelas PESE 2015 Estudo PENSE IBGE 7.4 SISVAN SISVAN 7.5 Informações sobre saúde SEI SEI Saúde library(readr) populacao_etaria_distsanit &lt;- read_delim(&quot;data/populacao_etaria_distsanit_v02.csv&quot;, &quot;;&quot;, escape_double = FALSE, trim_ws = TRUE) ## Rows: 12 Columns: 20 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;;&quot; ## chr (1): DISTSANIT ## dbl (19): Total, &lt;1, 01-04, 05-09, 10-14, 15-19, 20-24, 25-29, 30-34, 35-39,... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. library(formattable) tabela_etaria &lt;- NULL tabela_etaria &lt;- dplyr::select(populacao_etaria_distsanit,-Total) formattable(tabela_etaria) DISTSANIT &lt;1 01-04 05-09 10-14 15-19 20-24 25-29 30-34 35-39 40-44 45-49 50-54 55-59 60-64 65-69 70-74 75-79 80+ 1 -Centro Histórico 655 2577 3565 4404 5714 7855 8003 6717 5382 5372 5370 5028 4043 3236 2418 2131 1675 2606 2 - Itapagipe 1910 8027 10994 13544 13851 15249 16989 15691 13519 13566 12317 10335 7750 5911 4301 3629 2607 3252 3 - São Caetano/Valéria 3558 15036 20846 24349 23849 24980 28823 27177 23431 21008 17251 13924 9891 7135 4935 3794 2352 2603 4 - Liberdade 2038 8825 12239 14434 15120 16855 19871 18077 14982 14507 13652 11646 8625 6346 4553 3759 2736 3344 5 - Brotas 2401 9315 12448 14849 16146 19841 22705 20845 17880 17104 15782 13469 10190 7487 5232 4263 3192 3951 6 - Barra/Rio Vermelho 3495 13470 17789 21323 25105 34207 37902 33989 27957 26211 25630 23281 19183 15561 11554 9471 6817 8987 7 - Boca do Rio 1523 5975 7516 8694 9720 13231 15104 13983 11207 10031 9531 8362 6778 4835 3037 2179 1402 1799 8 - Itapoã 3441 14442 19180 21896 22207 25355 28659 26682 21567 19570 17517 14893 11445 7572 4905 3293 2151 2446 9 - Cabula/Beirú 5521 21526 28897 33588 33981 40442 47153 44039 35179 30567 25144 21353 16026 11391 7100 4555 2681 2910 10 - Pau da Lima 3334 12910 17212 19732 19698 22378 25989 24560 20144 17443 14352 11593 8496 5953 3943 2577 1589 1648 11- Subúrbio Ferroviário 4843 19623 26960 31002 31040 32279 35995 32583 27284 24499 21032 17654 13163 9303 6213 4473 2843 3206 12 - Cajazeiras 2352 9691 13094 15290 14831 15968 17989 16731 13710 12262 10855 9538 6892 4329 2544 1645 1020 1085 formattable(tabela_etaria, align = c(&quot;l&quot;,rep(&quot;r&quot;, NCOL(tabela_etaria) - 1)), list( DISTSANIT = formatter(&quot;span&quot;, style = ~ style(color = &quot;grey&quot;,font.weight = &quot;bold&quot;)), area(col = 2:7) ~ color_tile(&quot;#DeF7E9&quot;, &quot;#71CA97&quot;))) DISTSANIT &lt;1 01-04 05-09 10-14 15-19 20-24 25-29 30-34 35-39 40-44 45-49 50-54 55-59 60-64 65-69 70-74 75-79 80+ 1 -Centro Histórico 655 2577 3565 4404 5714 7855 8003 6717 5382 5372 5370 5028 4043 3236 2418 2131 1675 2606 2 - Itapagipe 1910 8027 10994 13544 13851 15249 16989 15691 13519 13566 12317 10335 7750 5911 4301 3629 2607 3252 3 - São Caetano/Valéria 3558 15036 20846 24349 23849 24980 28823 27177 23431 21008 17251 13924 9891 7135 4935 3794 2352 2603 4 - Liberdade 2038 8825 12239 14434 15120 16855 19871 18077 14982 14507 13652 11646 8625 6346 4553 3759 2736 3344 5 - Brotas 2401 9315 12448 14849 16146 19841 22705 20845 17880 17104 15782 13469 10190 7487 5232 4263 3192 3951 6 - Barra/Rio Vermelho 3495 13470 17789 21323 25105 34207 37902 33989 27957 26211 25630 23281 19183 15561 11554 9471 6817 8987 7 - Boca do Rio 1523 5975 7516 8694 9720 13231 15104 13983 11207 10031 9531 8362 6778 4835 3037 2179 1402 1799 8 - Itapoã 3441 14442 19180 21896 22207 25355 28659 26682 21567 19570 17517 14893 11445 7572 4905 3293 2151 2446 9 - Cabula/Beirú 5521 21526 28897 33588 33981 40442 47153 44039 35179 30567 25144 21353 16026 11391 7100 4555 2681 2910 10 - Pau da Lima 3334 12910 17212 19732 19698 22378 25989 24560 20144 17443 14352 11593 8496 5953 3943 2577 1589 1648 11- Subúrbio Ferroviário 4843 19623 26960 31002 31040 32279 35995 32583 27284 24499 21032 17654 13163 9303 6213 4473 2843 3206 12 - Cajazeiras 2352 9691 13094 15290 14831 15968 17989 16731 13710 12262 10855 9538 6892 4329 2544 1645 1020 1085 library(sparkline) library(htmltools) df = data.frame(`Distritos` = as.vector(unname(tabela_etaria[1:12,1])), `Barras` = c(as.character(htmltools::as.tags(sparkline(as.vector(unname(tabela_etaria[1,2:19])), type = &quot;bar&quot;))), as.character(htmltools::as.tags(sparkline(as.vector(unname(tabela_etaria[2,2:19])), type = &quot;bar&quot;))), as.character(htmltools::as.tags(sparkline(as.vector(unname(tabela_etaria[3,2:19])), type = &quot;bar&quot;))), as.character(htmltools::as.tags(sparkline(as.vector(unname(tabela_etaria[4,2:19])), type = &quot;bar&quot;))), as.character(htmltools::as.tags(sparkline(as.vector(unname(tabela_etaria[5,2:19])), type = &quot;bar&quot;))), as.character(htmltools::as.tags(sparkline(as.vector(unname(tabela_etaria[6,2:19])), type = &quot;bar&quot;))), as.character(htmltools::as.tags(sparkline(as.vector(unname(tabela_etaria[7,2:19])), type = &quot;bar&quot;))), as.character(htmltools::as.tags(sparkline(as.vector(unname(tabela_etaria[8,2:19])), type = &quot;bar&quot;))), as.character(htmltools::as.tags(sparkline(as.vector(unname(tabela_etaria[9,2:19])), type = &quot;bar&quot;))), as.character(htmltools::as.tags(sparkline(as.vector(unname(tabela_etaria[10,2:19])), type = &quot;bar&quot;))), as.character(htmltools::as.tags(sparkline(as.vector(unname(tabela_etaria[11,2:19])), type = &quot;bar&quot;))), as.character(htmltools::as.tags(sparkline(as.vector(unname(tabela_etaria[12,2:19])), type = &quot;bar&quot;))) )) out = as.htmlwidget(formattable(df)) out$dependencies = c(out$dependencies, htmlwidgets:::widget_dependencies(&quot;sparkline&quot;, &quot;sparkline&quot;)) out 7.6 Informações sobre câncer INCA 7.7 Divisão dos distritos sanitários Informações mapas 7.8 Doenças de Condições Crônicas e Infecções Sexualmente Transmissíveis IST 7.9 Tabnet Salvador 7.10 Histogramas 7.11 Probabilidade versus possibilidade Introdução a conjuntos (Usar diagrama de Venn): quais os eventos que podemos ter nas eleições? Temos eventos: Válidos, Nulos, Branco, Faltantes. Interseção: 1° turno e 2° turno (é possível ter interseção entre as possibilidades) Frequência relativa: total de votos possíveis x a proporção em que ocorrem. Trazer argumentos sobre Fake News de cancelamento de eleição. Frequência: A frequência de pessoas que votaram, não votaram, votaram nulo. Trazer a ideia de equiprobabilidade pela visualização por heatmap; Variável aleatória: mostrar a variabilidade. Distribuição de probabilidade: classes de voto. Ex: investigar classes de votos para cada seção e montar histograma para cada um e interpretar a curva. Distribuição Uniforme. normal Ao final do capítulo, citar as incertezas na informação. Por exemplo, pessoas que não atualizam o título para os locais de moradia, pessoas que morrem e ainda não estão atualizadas na base… "],["references.html", "References", " References "]]
